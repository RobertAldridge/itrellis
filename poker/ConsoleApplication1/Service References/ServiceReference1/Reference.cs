//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication1.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/Poker")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IPoker")]
    public interface IPoker {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/OminousPokerFunction", ReplyAction="http://tempuri.org/IPoker/OminousPokerFunctionResponse")]
        string OminousPokerFunction(System.Xml.Linq.XElement input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/OminousPokerFunction", ReplyAction="http://tempuri.org/IPoker/OminousPokerFunctionResponse")]
        System.Threading.Tasks.Task<string> OminousPokerFunctionAsync(System.Xml.Linq.XElement input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IPoker/GetDataUsingDataContractResponse")]
        ConsoleApplication1.ServiceReference1.CompositeType GetDataUsingDataContract(ConsoleApplication1.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IPoker/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<ConsoleApplication1.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(ConsoleApplication1.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/GetBooksList", ReplyAction="http://tempuri.org/IPoker/GetBooksListResponse")]
        int GetBooksList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/GetBooksList", ReplyAction="http://tempuri.org/IPoker/GetBooksListResponse")]
        System.Threading.Tasks.Task<int> GetBooksListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/GetBookById", ReplyAction="http://tempuri.org/IPoker/GetBookByIdResponse")]
        int GetBookById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/GetBookById", ReplyAction="http://tempuri.org/IPoker/GetBookByIdResponse")]
        System.Threading.Tasks.Task<int> GetBookByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/AddBook", ReplyAction="http://tempuri.org/IPoker/AddBookResponse")]
        void AddBook(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/AddBook", ReplyAction="http://tempuri.org/IPoker/AddBookResponse")]
        System.Threading.Tasks.Task AddBookAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/UpdateBook", ReplyAction="http://tempuri.org/IPoker/UpdateBookResponse")]
        void UpdateBook(string id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/UpdateBook", ReplyAction="http://tempuri.org/IPoker/UpdateBookResponse")]
        System.Threading.Tasks.Task UpdateBookAsync(string id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/DeleteBook", ReplyAction="http://tempuri.org/IPoker/DeleteBookResponse")]
        void DeleteBook(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPoker/DeleteBook", ReplyAction="http://tempuri.org/IPoker/DeleteBookResponse")]
        System.Threading.Tasks.Task DeleteBookAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPokerChannel : ConsoleApplication1.ServiceReference1.IPoker, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PokerClient : System.ServiceModel.ClientBase<ConsoleApplication1.ServiceReference1.IPoker>, ConsoleApplication1.ServiceReference1.IPoker {
        
        public PokerClient() {
        }
        
        public PokerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PokerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PokerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PokerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string OminousPokerFunction(System.Xml.Linq.XElement input) {
            return base.Channel.OminousPokerFunction(input);
        }
        
        public System.Threading.Tasks.Task<string> OminousPokerFunctionAsync(System.Xml.Linq.XElement input) {
            return base.Channel.OminousPokerFunctionAsync(input);
        }
        
        public ConsoleApplication1.ServiceReference1.CompositeType GetDataUsingDataContract(ConsoleApplication1.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<ConsoleApplication1.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(ConsoleApplication1.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public int GetBooksList() {
            return base.Channel.GetBooksList();
        }
        
        public System.Threading.Tasks.Task<int> GetBooksListAsync() {
            return base.Channel.GetBooksListAsync();
        }
        
        public int GetBookById(string id) {
            return base.Channel.GetBookById(id);
        }
        
        public System.Threading.Tasks.Task<int> GetBookByIdAsync(string id) {
            return base.Channel.GetBookByIdAsync(id);
        }
        
        public void AddBook(string name) {
            base.Channel.AddBook(name);
        }
        
        public System.Threading.Tasks.Task AddBookAsync(string name) {
            return base.Channel.AddBookAsync(name);
        }
        
        public void UpdateBook(string id, string name) {
            base.Channel.UpdateBook(id, name);
        }
        
        public System.Threading.Tasks.Task UpdateBookAsync(string id, string name) {
            return base.Channel.UpdateBookAsync(id, name);
        }
        
        public void DeleteBook(string id) {
            base.Channel.DeleteBook(id);
        }
        
        public System.Threading.Tasks.Task DeleteBookAsync(string id) {
            return base.Channel.DeleteBookAsync(id);
        }
    }
}
